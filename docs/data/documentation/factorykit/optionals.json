{"variants":[{"paths":["\/documentation\/factorykit\/optionals"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit"]]},"metadata":{"roleHeading":"Article","title":"Optionals and Dynamic Registration","modules":[{"name":"FactoryKit"}],"role":"article"},"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"article","seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags"],"anchor":"Advanced-Topics","title":"Advanced Topics"}],"primaryContentSections":[{"content":[{"text":"Overview","type":"heading","anchor":"Overview","level":2},{"inlineContent":[{"text":"Optional Factory definitions have several uses, including:","type":"text"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Dynamic Registration - Providing Factory’s based on application state."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Multiple-Module Registration - Registering Factory’s across modules to avoid cross-cutting concerns."}]}]}]},{"inlineContent":[{"text":"Let’s take a look.","type":"text"}],"type":"paragraph"},{"text":"Dynamic Registration","type":"heading","anchor":"Dynamic-Registration","level":2},{"inlineContent":[{"text":"Consider the following optional factory.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension Container {","    let userProviding = Factory<UserProviding?> { self { nil } }","}"]},{"inlineContent":[{"text":"Looks strange, right? I mean, of what use is a Factory that returns nothing?","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Now let’s take a look at a dynamic registration in action."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["func authenticated(with user: User) {","    ...","    Container.shared.userProviding.register { UserProvider(user: user) }","    ...","}","","func logout() {","    ...","    Container.shared.userProviding.reset()","    ...","}"]},{"inlineContent":[{"text":"Now any view model or service that needs an instance of an authenticated user will receive one (or nothing if no user is authenticated).","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Here’s an example:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["class SomeViewModel: ObservableObject {","    @Injected(\\.userProviding) private let provider","    func update(email: String) {","        provider?.updateEmailAddress(email)","    }","}"]},{"inlineContent":[{"text":"The injected provider is optional by default since the Factory was defined that way.","type":"text"}],"type":"paragraph"},{"text":"Explicitly Unwrapped Optionals","type":"heading","anchor":"Explicitly-Unwrapped-Optionals","level":2},{"inlineContent":[{"text":"Note that you ","type":"text"},{"inlineContent":[{"text":"could","type":"text"}],"type":"emphasis"},{"text":" explicitly unwrap the optional…","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@Injected(\\.userProviding) private let provider: UserProviding!"]},{"inlineContent":[{"type":"text","text":"But doing so violates the core premise on which Factory was built in the first place: "},{"inlineContent":[{"type":"text","text":"Your code is guaranteed to be safe."}],"type":"emphasis"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"I’d advise against it."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A few other things here. First, note that we used "},{"type":"codeVoice","code":"@Injected"},{"type":"text","text":" to supply an optional type. We don’t need a "},{"type":"codeVoice","code":"@OptionalInjected"},{"type":"text","text":" property wrapper to do this as we did in Resolver. Same for "},{"type":"codeVoice","code":"@LazyInjected"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"And also note that calling register also ","type":"text"},{"inlineContent":[{"type":"text","text":"removes any cached dependency from its associated scope."}],"type":"emphasis"},{"text":" This ensures that any new dependency injection request performed from that point on will always get the most recently defined instance of an object.","type":"text"}],"type":"paragraph"},{"level":2,"text":"Optionals and Multiple Modules","type":"heading","anchor":"Optionals-and-Multiple-Modules"},{"inlineContent":[{"type":"text","text":"This technique can also be handy when doing registrations in a project with multiple modules. It’s a bit complex, so there’s an entire page devoted to it."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"See "},{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","type":"reference","isActive":true},{"type":"text","text":" for more."}],"type":"paragraph"}],"kind":"content"}],"sections":[],"abstract":[{"type":"text","text":"With Factory registrations can be performed at any time."}],"identifier":{"url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals","interfaceLanguage":"swift"},"references":{"doc://FactoryKit/documentation/FactoryKit/Cycle":{"title":"Resolution Cycles","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","type":"topic","abstract":[{"type":"text","text":"What’s a resolution cycle, and why should we care?"}],"role":"article","url":"\/documentation\/factorykit\/cycle","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/Modules":{"url":"\/documentation\/factorykit\/modules","type":"topic","title":"Modular Development","abstract":[{"type":"text","text":"Using Factory in a project with multiple modules."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","kind":"article","role":"article"},"doc://FactoryKit/documentation/FactoryKit":{"abstract":[{"text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"url":"\/documentation\/factorykit","role":"collection","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","kind":"symbol","title":"FactoryKit"},"doc://FactoryKit/documentation/FactoryKit/Design":{"type":"topic","url":"\/documentation\/factorykit\/design","title":"Designing Factory","kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","abstract":[{"text":"Rationale behind the design decisions made in Factory 1.0 and 2.0","type":"text"}],"role":"article"},"doc://FactoryKit/documentation/FactoryKit/Tags":{"url":"\/documentation\/factorykit\/tags","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags","abstract":[{"text":"Obtaining a list of dependencies of a given type.","type":"text"}],"role":"article","title":"Tags","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/Functional":{"title":"Functional Injection","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional","url":"\/documentation\/factorykit\/functional","role":"article","abstract":[{"text":"Factory can inject more than service classes and structs.","type":"text"}],"kind":"article"},"doc://FactoryKit/documentation/FactoryKit/Modifiers":{"abstract":[{"type":"text","text":"Considerations when defining and redefining a Factory’s behavior."}],"type":"topic","kind":"article","title":"Factory Modifiers","url":"\/documentation\/factorykit\/modifiers","role":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers"}}}