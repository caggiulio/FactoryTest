{"metadata":{"roleHeading":"Article","title":"SwiftUI Previews","role":"article","modules":[{"name":"FactoryKit"}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factorykit\/previews"]}],"seeAlsoSections":[{"title":"Development and Testing","generated":true,"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/SwiftUI","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains"],"anchor":"Development-and-Testing"}],"kind":"article","identifier":{"url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit"]]},"abstract":[{"type":"text","text":"Mocking dependencies for SwiftUI Previews."}],"primaryContentSections":[{"content":[{"type":"heading","level":2,"anchor":"Overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Factory can make SwiftUI Previews easier when we’re using View Models and those view models depend on internal dependencies. Let’s take a look.","type":"text"}]},{"type":"heading","level":2,"anchor":"SwiftUI-Previews","text":"SwiftUI Previews"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example of updating a view model’s service dependency in order to setup a particular state for  preview."}]},{"type":"codeListing","code":["\/\/ the view model","class ContentViewModel: ObservableObject {","    @Injected(\\.myService) private var service","    ...","    func load() async {","        let results = await service.load()","        ...","    }","}","","\/\/ the view","struct ContentView: View {","    @StateObject var viewModel = ContentViewModel()","    var body: some View {","        ...","    }","}","","\/\/ the preview","struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        let _ = Container.shared.myService.register { MockServiceN(4) }","        ContentView()","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"If we can control where and how the view model gets its data then we can put the view model into pretty much any state we choose.","type":"text"}]},{"type":"heading","level":2,"anchor":"SwiftUI-Previews","text":"SwiftUI #Previews"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The same can be done using the new macro-based #Preview option added to Xcode 15."}]},{"type":"codeListing","code":["#Preview {","    let _ = Container.shared.myService.register { MockServiceN(4) }","    ContentView()","}"],"syntax":"swift"},{"inlineContent":[{"text":"In fact, this ","type":"text"},{"code":"let _ = Container.shared.xxx.register","type":"codeVoice"},{"type":"text","text":" syntax happens so frequently that Factory 2.5 added some sugar to make it a bit easier."}],"type":"paragraph"},{"type":"codeListing","code":["#Preview {","    Container.shared.myService.preview { MockServiceN(4) }","    ContentView()","}"],"syntax":"swift"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"preview"},{"text":" modifier wraps ","type":"text"},{"type":"codeVoice","code":"register"},{"text":" and also returns an EmptyView, satisfying SwiftUI’s ViewBuilder and eliminating the need for ","type":"text"},{"type":"codeVoice","code":"let _ ="},{"text":".","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"Multiple-Registrations","level":2,"text":"Multiple Registrations"},{"inlineContent":[{"type":"text","text":"There’s also a variant for Containers if you need to do multiple registrations."}],"type":"paragraph"},{"type":"codeListing","code":["#Preview {","    Container.preview {","        $0.myService.register { MockServiceN(4) }","        $0.anotherService.register { MockAnotherService() }","    }","    ContentView()","}"],"syntax":"swift"},{"type":"heading","anchor":"Multiple-Previews","level":2,"text":"Multiple Previews"},{"inlineContent":[{"type":"text","text":"If we want to do multiple previews at once, each with different data, we simply need to instantiate our view models and pass them into the view as parameters."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Prior to Xcode 15 and given the ContentView we used above, we’d need to do:"}],"type":"paragraph"},{"type":"codeListing","code":["struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        Group {","            let _ = Container.shared.myService.register { MockServiceN(4) }","            let vm1 = ContentViewModel()","            ContentView(viewModel: vm1)","            ","            let _ = Container.shared.myService.register { MockServiceN(8) }","            let vm2 = ContentViewModel()","            ContentView(viewModel: vm2)","        }","    }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Of course, it’s even easier with #Preview as each one runs in its own context.."}],"type":"paragraph"},{"type":"codeListing","code":["#Preview {","    Container.shared.myService.preview { MockServiceN(4) }","    ContentView()","}","#Preview {","    Container.shared.myService.preview { MockServiceN(0) }","    ContentView()","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Since the #Preview macro has been back-ported to iOS 13, there’s really no need to use the old syntax."}],"type":"paragraph"},{"type":"heading","anchor":"Common-Setup","level":2,"text":"Common Setup"},{"inlineContent":[{"type":"text","text":"If we have several mocks that we use all of the time in our previews or unit tests, we can also add a setup function to a given container to make this easier."}],"type":"paragraph"},{"type":"codeListing","code":["extension Container {","    func setupMocks() {","        myService.register { MockServiceN(4) }","        sharedService.register { MockService2() }","    }","}","","#Preview {","    let _ = Container.shared.setupMocks()","    ContentView()","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Or if you want to roll with the cool kids and continue with the preview syntax…"}],"type":"paragraph"},{"type":"codeListing","code":["extension Container {","    func setupMocks() -> EmptyView {","        myService.register { MockServiceN(4) }","        sharedService.register { MockService2() }","        return EmptyView()","    }","}","","#Preview {","    Container.shared.setupMocks()","    ContentView()","}"],"syntax":"swift"}],"kind":"content"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"references":{"doc://FactoryKit/documentation/FactoryKit/Contexts":{"type":"topic","url":"\/documentation\/factorykit\/contexts","title":"Contexts","kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts","abstract":[{"text":"Changing injection results under special circumstances.","type":"text"}],"role":"article"},"doc://FactoryKit/documentation/FactoryKit/Chains":{"type":"topic","url":"\/documentation\/factorykit\/chains","title":"Circular Dependency Chains","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains","kind":"article","abstract":[{"type":"text","text":"Detecting and solving Circular Dependency Chains."}],"role":"article"},"doc://FactoryKit/documentation/FactoryKit/SwiftUI":{"type":"topic","url":"\/documentation\/factorykit\/swiftui","title":"SwiftUI","abstract":[{"type":"text","text":"Defining and using dependencies in SwiftUI."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/SwiftUI","kind":"article","role":"article"},"doc://FactoryKit/documentation/FactoryKit/Testing":{"url":"\/documentation\/factorykit\/testing","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","abstract":[{"text":"Using Factory for Unit and UI Testing.","type":"text"}],"type":"topic","role":"article","title":"Testing","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/Debugging":{"url":"\/documentation\/factorykit\/debugging","type":"topic","abstract":[{"type":"text","text":"Additional support for debugging resolution cycles, dependency chains and other issue."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","role":"article","title":"Debugging","kind":"article"},"doc://FactoryKit/documentation/FactoryKit":{"abstract":[{"text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"url":"\/documentation\/factorykit","role":"collection","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","kind":"symbol","title":"FactoryKit"}}}