{"schemaVersion":{"minor":3,"major":0,"patch":0},"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts"},"abstract":[{"type":"text","text":"Changing injection results under special circumstances."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factorykit\/contexts"]}],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/SwiftUI","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains"],"title":"Development and Testing","anchor":"Development-and-Testing"}],"metadata":{"roleHeading":"Article","modules":[{"name":"FactoryKit"}],"title":"Contexts","role":"article"},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"level":2,"anchor":"Overview","text":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Developers often use Factory to mock data for previews and unit tests. Now Factory 2.1 extends these capabilities by allowing them to specify dependencies based on the application’s current "},{"type":"emphasis","inlineContent":[{"text":"context","type":"text"}]},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"What if, for example, you "},{"inlineContent":[{"text":"never","type":"text"}],"type":"strong"},{"type":"text","text":" want your application’s analytics library to be called when running unit tests?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Piece of cake. Just register a new override for that particular context."}]},{"syntax":"swift","code":["extension Container: AutoRegistering {","    public func autoRegister() {","        #if DEBUG","        container.analytics","            .context(.test) { MockAnalyticsEngine() }","        #endif","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Factory makes it easy.","type":"text"}]},{"type":"heading","text":"Contexts","level":2,"anchor":"Contexts"},{"inlineContent":[{"type":"text","text":"Factory 2.1 provides quite a few predefined contexts for your use. They are:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"arg(String)"}],"type":"strong"},{"text":" - application is launched with a particular argument.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"args([String])","type":"text"}],"type":"strong"},{"type":"text","text":" - application is launched with one of several arguments."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"preview","type":"text"}],"type":"strong"},{"text":" - application is running in Xcode Preview mode","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"test","type":"text"}]},{"type":"text","text":" - application is running in Xcode Unit Test mode"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"debug","type":"text"}],"type":"strong"},{"type":"text","text":" - application is running in Xcode DEBUG mode"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"simulator","type":"text"}]},{"type":"text","text":" - application is running within an Xcode simulator"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"device"}],"type":"strong"},{"type":"text","text":" - application is running on an actual device"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Let’s dive in."}],"type":"paragraph"},{"type":"heading","anchor":"Some-Examples","level":2,"text":"Some Examples"},{"anchor":"-onTest","level":3,"type":"heading","text":"• onTest"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As mentioned, the Factory closure associated with this context is used whenever your application or library is running unit tests using XCTest."}]},{"code":["container.analytics","    .context(.test) { MockAnalyticsEngine() }"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There’s also a shortcut version:"}]},{"code":["container.analytics","    .onTest { MockAnalyticsEngine() }"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Having contexts built into Factory saves you from having to go to StackOverflow in an attempt to figure out how to do the same thing for yourself.","type":"text"}]},{"code":["if ProcessInfo.processInfo.environment[\"XCTestConfigurationFilePath\"] != nil {","    container.analytics.register { MockAnalyticsEngine() }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Using onTest is much easier.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"By the way, checking the environment for XCTestConfigurationFilePath doesn’t work if your tests are launched from the command line using swift test. So much for StackOverflow."}]}]},{"level":3,"type":"heading","text":"• onPreview","anchor":"-onPreview"},{"type":"paragraph","inlineContent":[{"text":"This specifies a dependency that will be used whenever your app or module is running SwiftUI Previews.","type":"text"}]},{"code":["container.myServiceType","    .onPreview { MockService() }"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Which obviously makes your preview code itself much simpler."}]},{"code":["struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        ContentView()","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can, of course, still use the mechanisms shown in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews"},{"type":"text","text":"."}]},{"level":3,"type":"heading","text":"• onDebug","anchor":"-onDebug"},{"type":"paragraph","inlineContent":[{"text":"Triggered whenever your application is running in debug mode in simulators, on a device, or when running unit tests.","type":"text"}]},{"name":"Note","type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":"That there’s no "},{"code":"release","type":"codeVoice"},{"type":"text","text":" context. Just use the standard "},{"code":"register","type":"codeVoice"},{"type":"text","text":" syntax in that case."}],"type":"paragraph"}]},{"level":3,"text":"•  onSimulator \/ onDevice","type":"heading","anchor":"-onSimulator--onDevice"},{"type":"paragraph","inlineContent":[{"text":"Pretty apparent. What may not be so apparent, however, is that unlike all of the above these two contexts are also available in release builds.","type":"text"}]},{"anchor":"-onArg","type":"heading","level":3,"text":"• onArg"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"arg"},{"type":"text","text":" context is a powerful tool to have when you want to UITest your application and you want to change its behavior."}]},{"type":"paragraph","inlineContent":[{"text":"As shown in the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing"},{"text":" section the test case itself is pretty standard.","type":"text"}]},{"code":["import XCTest","","final class FactoryDemoUITests: XCTestCase {","    func testExample() throws {","        let app = XCUIApplication()","        app.launchArguments.append(\"mock1\")","        app.launch()","","        let welcome = app.staticTexts[\"Mock Number 1! for Michael\"]","        XCTAssert(welcome.exists)","    }","}   "],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The shortcut comes in the application itself when we want to check the launch arguments to see what registrations we might want to change.","type":"text"}]},{"code":["import Foundation","import Factory","","extension Container: AutoRegistering {","    public func autoRegister() {","        #if DEBUG","        myServiceType","            .onArg(\"mock0\") { EmptyService() }","            .onArg(\"mock1\") { MockServiceN(1) }","            .onArg(\"error\") { MockError(404) }","        #endif","    }","}"],"syntax":"swift","type":"codeListing"},{"text":"• onArgs","anchor":"-onArgs","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Similar to arg, but let’s you use the same factory when any of several arguments are passed."}]},{"type":"codeListing","code":["myServiceType","    .onArgs([\"mock0\", \"mock1\", \"mock3\"]) { ","        EmptyService()","    }"],"syntax":"swift"},{"level":2,"text":"Runtime Arguments","type":"heading","anchor":"Runtime-Arguments"},{"inlineContent":[{"text":"You can also add and remove your own arguments at runtime. Consider this…","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["FactoryContext.setArg(\"light\", forKey: \"theme\")","FactoryContext.removeArg(forKey: \"theme\")","","myStyleSystem { StandardTheme() }","    .onArg(\"light\") { LightTheme() }","    .onArg(\"dark\") { DarkTheme() }"],"syntax":"swift"},{"level":2,"anchor":"Multiple-Contexts","type":"heading","text":"Multiple Contexts"},{"inlineContent":[{"type":"text","text":"As you may have noticed above in the "},{"code":"arg","type":"codeVoice"},{"text":" example, chaining multiple contexts together work just as you’d expect and are specified using Factory’s modifier syntax.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Here’s an example of specifying separate services depending on context.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["container.myServiceType","    .onPreview { MockService() }","    .onTest { UnitTestMockService() }"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"And here’s an example saying we want the same dependency under multiple contexts."}],"type":"paragraph"},{"code":["container.myServiceType","    .context(.simulator, .test) { MockService() }"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Which brings us to…"}],"type":"paragraph"},{"type":"heading","anchor":"Context-Precedence","text":"Context Precedence","level":2},{"type":"paragraph","inlineContent":[{"text":"Registering multiple contexts could lead one to wonder just which one will be used in a situation where multiple contexts apply. Here’s the order of evaluation.","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"arg[s]"}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"preview","type":"text"}],"type":"strong"},{"type":"text","text":" *"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"test"}]},{"type":"text","text":" *"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"simulator","type":"text"}],"type":"strong"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"device"}],"type":"strong"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"debug"}]},{"text":" *","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"registered factory","type":"text"}]},{"type":"text","text":" (if any)"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"original factory"}],"type":"strong"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"Note that any context marked with an asterisk (*) is only available in a DEBUG build. The executable functionality is stripped from release builds."}],"type":"paragraph"},{"anchor":"Global-Context","level":2,"text":"Global Context","type":"heading"},{"inlineContent":[{"type":"text","text":"Keep in mind that contexts are global. The entire app is running in debug more or it’s not. It was passed a “mock0” argument at runtime or it wasn’t."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"onArg","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"onDebug"},{"text":" and other context modifiers basically define how the app should respond to that particular context.","type":"text"}]},{"type":"heading","level":2,"text":"Changing a Context","anchor":"Changing-a-Context"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Keep in mind that if we ever want to change a Factory’s context but that Factory defines a scope, then we’re also going to need to "},{"type":"strong","inlineContent":[{"type":"text","text":"manually"}]},{"type":"text","text":" clear the scope cache for that object."}]},{"syntax":"swift","code":["Container.shared.myService","    .onTest { NullAnalyticsEngine() }","    .reset(.scope)"],"type":"codeListing"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"With "},{"code":"reset","type":"codeVoice"},{"type":"text","text":" make sure you specify that you only want to clear the scope. Calling "},{"code":"reset","type":"codeVoice"},{"type":"text","text":" without a parameter clears everything, including contexts like the one you just set!"}]}],"style":"warning","name":"Warning","type":"aside"},{"inlineContent":[{"type":"text","text":"See the section on "},{"type":"emphasis","inlineContent":[{"text":"The Factory Wins","type":"text"}]},{"text":" in ","type":"text"},{"isActive":true,"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","type":"reference"},{"text":" for more information on this and other scenarios.","type":"text"}],"type":"paragraph"}]}],"kind":"article","references":{"doc://FactoryKit/documentation/FactoryKit/Previews":{"type":"topic","url":"\/documentation\/factorykit\/previews","title":"SwiftUI Previews","kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","abstract":[{"type":"text","text":"Mocking dependencies for SwiftUI Previews."}],"role":"article"},"doc://FactoryKit/documentation/FactoryKit/Chains":{"type":"topic","url":"\/documentation\/factorykit\/chains","title":"Circular Dependency Chains","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains","kind":"article","abstract":[{"type":"text","text":"Detecting and solving Circular Dependency Chains."}],"role":"article"},"doc://FactoryKit/documentation/FactoryKit/Debugging":{"url":"\/documentation\/factorykit\/debugging","type":"topic","abstract":[{"type":"text","text":"Additional support for debugging resolution cycles, dependency chains and other issue."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","role":"article","title":"Debugging","kind":"article"},"doc://FactoryKit/documentation/FactoryKit":{"abstract":[{"text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"url":"\/documentation\/factorykit","role":"collection","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","kind":"symbol","title":"FactoryKit"},"doc://FactoryKit/documentation/FactoryKit/Testing":{"url":"\/documentation\/factorykit\/testing","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","abstract":[{"text":"Using Factory for Unit and UI Testing.","type":"text"}],"type":"topic","role":"article","title":"Testing","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/SwiftUI":{"type":"topic","url":"\/documentation\/factorykit\/swiftui","title":"SwiftUI","abstract":[{"type":"text","text":"Defining and using dependencies in SwiftUI."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/SwiftUI","kind":"article","role":"article"},"doc://FactoryKit/documentation/FactoryKit/Modifiers":{"abstract":[{"type":"text","text":"Considerations when defining and redefining a Factory’s behavior."}],"type":"topic","kind":"article","title":"Factory Modifiers","url":"\/documentation\/factorykit\/modifiers","role":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers"}}}