{"sections":[],"kind":"symbol","primaryContentSections":[{"content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"inlineContent":[{"type":"text","text":"Factory is strongly influenced by SwiftUI, and in my opinion is highly suited for use in that environment."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Factory is…"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Adaptable"}],"type":"strong"},{"text":": Factory doesn’t tie you down to a single dependency injection strategy or technique.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Powerful","type":"text"}],"type":"strong"},{"type":"text","text":": Factory supports containers, scopes, passed parameters, contexts, decorators, unit tests, SwiftUI Previews, and much, much more."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Performant"}]},{"type":"text","text":": Little to no setup time is needed for the vast majority of your services, resolutions are extremely fast, and no compile-time scripts or build phases are needed."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Safe"}]},{"type":"text","text":": Factory is compile-time safe; a factory for a given type must exist or the code simply will not compile."}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Concise","type":"text"}]},{"type":"text","text":": Defining a registration usually takes just a single line of code. Same for resolution."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Flexible"}]},{"type":"text","text":": Working with UIKIt or SwiftUI? iOS or macOS? Using MVVM? MVP? Clean? VIPER? No problem. Factory works with all of these and more."}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Documented","type":"text"}],"type":"strong"},{"type":"text","text":": Factory 2.0 has extensive DocC documentation and examples covering its classes, methods, and use cases."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Lightweight","type":"text"}],"type":"strong"},{"type":"text","text":": With all of that Factory is slim and trim, under 800 lines of executable code."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Tested"}],"type":"strong"},{"type":"text","text":": Unit tests with 100% code coverage helps ensure correct operation of registrations, resolutions, and scopes."}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Free"}]},{"type":"text","text":": Factory is free and open source under the MIT License."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Ready to get started?"}],"type":"paragraph"}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/FactoryKit\/documentation\/FactoryKit"},"variants":[{"paths":["\/documentation\/factorykit"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[[]]},"abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"schemaVersion":{"minor":3,"major":0,"patch":0},"topicSections":[{"anchor":"The-Basics","title":"The Basics","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Containers","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Scopes"]},{"anchor":"Development-and-Testing","title":"Development and Testing","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/SwiftUI","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains"]},{"anchor":"Advanced-Topics","title":"Advanced Topics","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags"]},{"anchor":"Additional-Topics","title":"Additional Topics","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Migration"]},{"generated":true,"anchor":"Classes","title":"Classes","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Container","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ContainerManager"]},{"generated":true,"anchor":"Protocols","title":"Protocols","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/AutoRegistering","doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryModifying","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ManagedContainer","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Resolving","doc:\/\/FactoryKit\/documentation\/FactoryKit\/SharedContainer"]},{"generated":true,"anchor":"Structures","title":"Structures","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/DynamicInjected","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory","doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryContext","doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryRegistration","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected","doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObject","doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObservable","doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedType","doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected"]},{"generated":true,"anchor":"Functions","title":"Functions","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/resolve(_:)-1v66f","doc:\/\/FactoryKit\/documentation\/FactoryKit\/resolve(_:)-22zpa"]},{"generated":true,"anchor":"Type-Aliases","title":"Type Aliases","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactoryType","doc:\/\/FactoryKit\/documentation\/FactoryKit\/VoidFactoryType"]},{"generated":true,"anchor":"Enumerations","title":"Enumerations","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryContextType","doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryResetOptions"]}],"metadata":{"symbolKind":"module","roleHeading":"Framework","title":"FactoryKit","modules":[{"name":"FactoryKit"}],"role":"collection","externalID":"FactoryKit"},"references":{"doc://FactoryKit/documentation/FactoryKit/Previews":{"type":"topic","url":"\/documentation\/factorykit\/previews","title":"SwiftUI Previews","kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","abstract":[{"type":"text","text":"Mocking dependencies for SwiftUI Previews."}],"role":"article"},"doc://FactoryKit/documentation/FactoryKit/InjectedType":{"url":"\/documentation\/factorykit\/injectedtype","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedType","title":"InjectedType","type":"topic","role":"symbol","abstract":[{"text":"Basic property wrapper for optional injected types","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"InjectedType","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"InjectedType","kind":"identifier"}]},"doc://FactoryKit/documentation/FactoryKit/ParameterFactoryType":{"navigatorTitle":[{"kind":"identifier","text":"ParameterFactoryType"}],"url":"\/documentation\/factorykit\/parameterfactorytype","kind":"symbol","title":"ParameterFactoryType","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactoryType"}],"type":"topic","role":"symbol","abstract":[],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactoryType"},"doc://FactoryKit/documentation/FactoryKit/Contexts":{"type":"topic","url":"\/documentation\/factorykit\/contexts","title":"Contexts","kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts","abstract":[{"text":"Changing injection results under special circumstances.","type":"text"}],"role":"article"},"doc://FactoryKit/documentation/FactoryKit/Design":{"type":"topic","url":"\/documentation\/factorykit\/design","title":"Designing Factory","kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","abstract":[{"text":"Rationale behind the design decisions made in Factory 1.0 and 2.0","type":"text"}],"role":"article"},"doc://FactoryKit/documentation/FactoryKit/Modules":{"url":"\/documentation\/factorykit\/modules","type":"topic","title":"Modular Development","abstract":[{"type":"text","text":"Using Factory in a project with multiple modules."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","kind":"article","role":"article"},"doc://FactoryKit/documentation/FactoryKit/ManagedContainer":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ManagedContainer","type":"topic","title":"ManagedContainer","navigatorTitle":[{"text":"ManagedContainer","kind":"identifier"}],"abstract":[{"type":"text","text":"ManagedContainer defines the core protocol all Containers must adopt."}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ManagedContainer","kind":"identifier"}],"url":"\/documentation\/factorykit\/managedcontainer","kind":"symbol"},"doc://FactoryKit/documentation/FactoryKit/Cycle":{"title":"Resolution Cycles","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","type":"topic","abstract":[{"type":"text","text":"What’s a resolution cycle, and why should we care?"}],"role":"article","url":"\/documentation\/factorykit\/cycle","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/Injected":{"abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"type":"topic","kind":"symbol","title":"Injected","navigatorTitle":[{"kind":"identifier","text":"Injected"}],"url":"\/documentation\/factorykit\/injected","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Injected"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected"},"doc://FactoryKit/documentation/FactoryKit/DynamicInjected":{"role":"symbol","kind":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"DynamicInjected"}],"title":"DynamicInjected","url":"\/documentation\/factorykit\/dynamicinjected","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/DynamicInjected","navigatorTitle":[{"text":"DynamicInjected","kind":"identifier"}]},"doc://FactoryKit/documentation/FactoryKit/FactoryRegistration":{"title":"FactoryRegistration","type":"topic","url":"\/documentation\/factorykit\/factoryregistration","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryRegistration","role":"symbol","abstract":[{"text":"Shared registration type for Factory and ParameterFactory. Used internally to manage the registration and resolution process.","type":"text"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"FactoryRegistration"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryRegistration","kind":"identifier"}]},"doc://FactoryKit/documentation/FactoryKit/Chains":{"type":"topic","url":"\/documentation\/factorykit\/chains","title":"Circular Dependency Chains","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains","kind":"article","abstract":[{"type":"text","text":"Detecting and solving Circular Dependency Chains."}],"role":"article"},"doc://FactoryKit/documentation/FactoryKit/FactoryContextType":{"navigatorTitle":[{"text":"FactoryContextType","kind":"identifier"}],"url":"\/documentation\/factorykit\/factorycontexttype","type":"topic","title":"FactoryContextType","abstract":[{"text":"Context types available for special purpose factory registrations.","type":"text"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryContextType","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryContextType","kind":"identifier"}],"role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/resolve(_:)-1v66f":{"type":"topic","url":"\/documentation\/factorykit\/resolve(_:)-1v66f","title":"resolve(_:)","abstract":[{"type":"text","text":"Global function to resolve a keypath on the specified shared container into the requested type"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/resolve(_:)-1v66f","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"resolve","kind":"identifier"},{"text":"<","kind":"text"},{"text":"C","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"KeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":", "},{"preciseIdentifier":"s:10FactoryKit0A0V","kind":"typeIdentifier","text":"Factory"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"text":">>) -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory":{"url":"\/documentation\/factorykit\/parameterfactory","type":"topic","title":"ParameterFactory","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","role":"symbol","abstract":[{"type":"text","text":"Factory capable of taking parameters at runtime"}],"kind":"symbol","navigatorTitle":[{"text":"ParameterFactory","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ParameterFactory"}]},"doc://FactoryKit/documentation/FactoryKit/AutoRegistering":{"navigatorTitle":[{"text":"AutoRegistering","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/AutoRegistering","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AutoRegistering","kind":"identifier"}],"url":"\/documentation\/factorykit\/autoregistering","title":"AutoRegistering","type":"topic","abstract":[{"text":"Adds an registration “hook” to a ","type":"text"},{"type":"codeVoice","code":"Container"},{"text":".","type":"text"}],"role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/FactoryResetOptions":{"navigatorTitle":[{"kind":"identifier","text":"FactoryResetOptions"}],"type":"topic","url":"\/documentation\/factorykit\/factoryresetoptions","title":"FactoryResetOptions","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryResetOptions","kind":"symbol","abstract":[{"text":"Reset options for Factory’s and Container’s","type":"text"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryResetOptions"}],"role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/Scopes":{"type":"topic","url":"\/documentation\/factorykit\/scopes","title":"Scopes","kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Scopes","abstract":[{"text":"Not everything wants to be a Singleton. Learn the power of Scopes.","type":"text"}],"role":"collectionGroup"},"doc://FactoryKit/documentation/FactoryKit/Optionals":{"type":"topic","url":"\/documentation\/factorykit\/optionals","title":"Optionals and Dynamic Registration","kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals","abstract":[{"text":"With Factory registrations can be performed at any time.","type":"text"}],"role":"article"},"doc://FactoryKit/documentation/FactoryKit/Modifiers":{"abstract":[{"type":"text","text":"Considerations when defining and redefining a Factory’s behavior."}],"type":"topic","kind":"article","title":"Factory Modifiers","url":"\/documentation\/factorykit\/modifiers","role":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers"},"doc://FactoryKit/documentation/FactoryKit":{"abstract":[{"text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"url":"\/documentation\/factorykit","role":"collection","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","kind":"symbol","title":"FactoryKit"},"doc://FactoryKit/documentation/FactoryKit/ContainerManager":{"type":"topic","abstract":[{"type":"text","text":"ContainerManager manages the registration and scope caching storage mechanisms for a given container."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ContainerManager","title":"ContainerManager","kind":"symbol","url":"\/documentation\/factorykit\/containermanager","role":"symbol","navigatorTitle":[{"text":"ContainerManager","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ContainerManager"}]},"doc://FactoryKit/documentation/FactoryKit/FactoryModifying":{"navigatorTitle":[{"text":"FactoryModifying","kind":"identifier"}],"url":"\/documentation\/factorykit\/factorymodifying","kind":"symbol","title":"FactoryModifying","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryModifying","kind":"identifier"}],"type":"topic","role":"symbol","abstract":[{"type":"text","text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryModifying"},"doc://FactoryKit/documentation/FactoryKit/Factory":{"abstract":[{"text":"A Factory manages the dependency injection process for a specific object or service.","type":"text"}],"type":"topic","title":"Factory","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory","url":"\/documentation\/factorykit\/factory","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Factory","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"Factory","kind":"identifier"}],"kind":"symbol"},"doc://FactoryKit/documentation/FactoryKit/LazyInjected":{"url":"\/documentation\/factorykit\/lazyinjected","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type the first time the wrapped value is requested.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LazyInjected"}],"title":"LazyInjected","navigatorTitle":[{"kind":"identifier","text":"LazyInjected"}],"kind":"symbol"},"doc://FactoryKit/documentation/FactoryKit/Container":{"navigatorTitle":[{"text":"Container","kind":"identifier"}],"type":"topic","url":"\/documentation\/factorykit\/container","title":"Container","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Container","abstract":[{"text":"This is the default Container provided for your convenience by Factory.","type":"text"}],"kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Container","kind":"identifier"}],"role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/FactoryContext":{"url":"\/documentation\/factorykit\/factorycontext","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryContext","title":"FactoryContext","role":"symbol","abstract":[],"kind":"symbol","navigatorTitle":[{"text":"FactoryContext","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryContext"}]},"doc://FactoryKit/documentation/FactoryKit/WeakLazyInjected":{"navigatorTitle":[{"text":"WeakLazyInjected","kind":"identifier"}],"type":"topic","url":"\/documentation\/factorykit\/weaklazyinjected","title":"WeakLazyInjected","kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected","abstract":[{"text":"Convenience property wrapper takes a factory and resolves a weak instance of the desired type the first time the wrapped value is requested.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"WeakLazyInjected","kind":"identifier"}],"role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/Containers":{"kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Containers","url":"\/documentation\/factorykit\/containers","title":"Containers","type":"topic","abstract":[{"text":"Containers are the cornerstone of Factory 2.0. What are they and how do we use them?","type":"text"}],"role":"article"},"doc://FactoryKit/documentation/FactoryKit/Testing":{"url":"\/documentation\/factorykit\/testing","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","abstract":[{"text":"Using Factory for Unit and UI Testing.","type":"text"}],"type":"topic","role":"article","title":"Testing","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/Debugging":{"url":"\/documentation\/factorykit\/debugging","type":"topic","abstract":[{"type":"text","text":"Additional support for debugging resolution cycles, dependency chains and other issue."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","role":"article","title":"Debugging","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/resolve(_:)-22zpa":{"kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/resolve(_:)-22zpa","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolve"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"KeyPath","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Container","preciseIdentifier":"s:10FactoryKit9ContainerC"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Factory","preciseIdentifier":"s:10FactoryKit0A0V"},{"kind":"text","text":"<"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">>) -> "},{"text":"T","kind":"typeIdentifier"}],"url":"\/documentation\/factorykit\/resolve(_:)-22zpa","title":"resolve(_:)","type":"topic","abstract":[{"text":"Global function to resolve a keypath on Container.shared into the requested type","type":"text"}],"role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/GettingStarted":{"role":"collectionGroup","kind":"article","type":"topic","title":"Getting Started","url":"\/documentation\/factorykit\/gettingstarted","abstract":[{"text":"Defining a Factory, resolving it, and changing the default behavior.","type":"text"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted"},"doc://FactoryKit/documentation/FactoryKit/InjectedObject":{"navigatorTitle":[{"text":"InjectedObject","kind":"identifier"}],"url":"\/documentation\/factorykit\/injectedobject","type":"topic","title":"InjectedObject","kind":"symbol","abstract":[{"type":"text","text":"Immediate injection property wrapper for SwiftUI ObservableObjects."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObject","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"InjectedObject","kind":"identifier"}],"role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/SharedContainer":{"navigatorTitle":[{"text":"SharedContainer","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/SharedContainer","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SharedContainer","kind":"identifier"}],"url":"\/documentation\/factorykit\/sharedcontainer","title":"SharedContainer","type":"topic","abstract":[{"type":"text","text":"SharedContainer defines the protocol all Containers must adopt if they want to support Service Locator style injection or support any of the injection property wrappers."}],"role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/Tags":{"url":"\/documentation\/factorykit\/tags","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags","abstract":[{"text":"Obtaining a list of dependencies of a given type.","type":"text"}],"role":"article","title":"Tags","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/SwiftUI":{"type":"topic","url":"\/documentation\/factorykit\/swiftui","title":"SwiftUI","abstract":[{"type":"text","text":"Defining and using dependencies in SwiftUI."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/SwiftUI","kind":"article","role":"article"},"doc://FactoryKit/documentation/FactoryKit/VoidFactoryType":{"abstract":[],"type":"topic","kind":"symbol","title":"VoidFactoryType","navigatorTitle":[{"text":"VoidFactoryType","kind":"identifier"}],"url":"\/documentation\/factorykit\/voidfactorytype","role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"VoidFactoryType"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/VoidFactoryType"},"doc://FactoryKit/documentation/FactoryKit/Functional":{"title":"Functional Injection","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional","url":"\/documentation\/factorykit\/functional","role":"article","abstract":[{"text":"Factory can inject more than service classes and structs.","type":"text"}],"kind":"article"},"doc://FactoryKit/documentation/FactoryKit/Resolving":{"navigatorTitle":[{"kind":"identifier","text":"Resolving"}],"type":"topic","url":"\/documentation\/factorykit\/resolving","title":"Resolving","abstract":[{"text":"When protocol is applied to a container it enables a typed registration\/resolution mode.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Resolving","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Resolving"}],"role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/InjectedObservable":{"role":"symbol","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"InjectedObservable"}],"title":"InjectedObservable","url":"\/documentation\/factorykit\/injectedobservable","abstract":[{"text":"A property wrapper that injects an Observable dependency into a SwiftUI view.","type":"text"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObservable","navigatorTitle":[{"kind":"identifier","text":"InjectedObservable"}]},"doc://FactoryKit/documentation/FactoryKit/Migration":{"type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Migration","title":"Migration","abstract":[{"type":"text","text":"Moving from 1.x to 2.0"}],"role":"article","url":"\/documentation\/factorykit\/migration","kind":"article"}}}